/*
 * clever-bot
 *
 * https://github.com/rgsilva/clever-projects
 * https://clever-lang.org
 *
 */

import std.*;

class Irc {
	// ==================================
	// == Private code

	// Internal variables

	private var socket;
	private var sleepCount;
	private var connected;

	// Internal functions

	private function extractUser(str) {
		var blocks = str.split("!");
		if (blocks.size() > 1) {
			return blocks[0];
		} else {
			return "";
		}
	}

	private function debug(level, message) {
		if (this.verbose >= level) {
			io:println("(" + level + ") " + message);
		}
	}

	private function keepAlive() {
		var s = "PING\n";
		this.socket.send(s);
	}

	private function process(line) {
		var reLooking = regex:Regex.new("^:[^ ]+ NOTICE \* :[^ ]+ Looking");
		var reWelcome = regex:Regex.new("^:[^ ]+ 001 [^ ]+ :Welcome.*");
		var rePrivmsg = regex:Regex.new("^:([^ ]+) PRIVMSG ([^ ]+) :(.*)");

		if (reLooking.match(line)) {
			/* Looking up for your hostname... */
			this.debug(1, "Looking up for your hostname...");

			// We are connected.
			if (this.onConnected != null) {
				this.onConnected();
			}
		} else if (reWelcome.match(line)) {
			/* 001 Welcome */
			this.debug(1, "001 Welcome.");
			this.connected = true;

			// We authenticated.
			if (this.onAuthenticated != null) {
				this.onAuthenticated();
			}
		} else if (rePrivmsg.match(line)) {
			/* PRIVMSG to a channel or user */
			var user = this.extractUser(rePrivmsg.group(1));
			var target = rePrivmsg.group(2);
			var msg = rePrivmsg.group(3);

			if (user != "") {
				if (target[0] == '#') {
					if (this.onChannelMessage != null) {
						this.onChannelMessage(target, user, msg);
					}
				} else {
					if (this.onPrivateMessage != null) {
						this.onPrivateMessage(user, msg);
					}
				}
			}
		} else {
			this.debug(1, "No match: " + line);
		}
	}

	// ==================================
	// == Public code

	// Verbose settings (0 = no debug, 1 = IRC debug, 2 = full debug)
	var verbose = 0;

	// Callback functions
	var onConnected = null;
	var onAuthenticated = null;
	var onChannelMessage = null;
	var onPrivateMessage = null;

	// Send USER command
	function user(username, hostname, servername, realname) {
		var s = "USER " + username + " " + hostname + " " + servername + " :" + realname + "\n";
	        this.socket.send(s);
	}

	// Send NICK command
	function nick(nickname) {
		var s = "NICK " + nickname + "\n";
		this.socket.send(s);
	}

	// Send JOIN command
	function join(channel) {
		var s = "JOIN " + channel + "\n";
		this.socket.send(s);
	}

	// Send PRIVMSG command
	function privmsg(target, msg) {
	        var s = "PRIVMSG " + target + " :" + msg + "\n";
        	this.socket.send(s);
	}

	// Connect function
	function connect(host, port) {
		this.sleepCount = 0;
		this.connected = false;

		this.socket = net:TcpSocket.new();
		this.socket.setHost(host);
		this.socket.setPort(port);
		this.socket.setTimeout(1000);

		this.socket.connect();

		// TODO: fix socket.good() on TcpSocket.
		return true;

		if (this.socket.good()) {
	                io:println("[" + this.socket.getError().toString() + "] " + this.socket.getErrorMessage());
        	        return false;
	        } else {
                	return true;
        	}
	}

	// Program loop function
	function loop() {
		while (this.socket.isOpen()) {
			this.debug(2, "this.socket.isOpen() returned true.");
			if (this.socket.poll()) {
				this.debug(2, "this.socket.poll() returned true.");
				var data = "";

				// Read all data until there's nothing more to read.
				while (this.socket.poll()) {
					this.debug(2, "this.socket.poll() returned true.");
					var buffer = this.socket.receive(1024);
					if (this.socket.good()) {
						data = data + buffer;
					} else {
						break;
					}
					this.debug(2, "Data added. Polling more data...");
				}
				this.debug(2, "Data polled.");

				// Process the data: strings are splitted by a \n.
				var lines = data.replace("\r", "").split("\n");
				for (var i = 0; i < lines.size(); i++) {
					if (lines[i].trim() != "") {
						this.process(lines[i].trim());
					}				
				}
			}

			// Sleep for 1s (low the CPU usage).
			sys:sleep(1000);
			this.sleepCount++;

			// If we already sleep for more than 60s, send keep-alive ping.
			if (this.connected && this.sleepCount >= 60) {
				this.debug(1, "Sending keep-alive.");
				this.keepAlive();
				this.sleepCount = 1;
			}
		}
	}
}
